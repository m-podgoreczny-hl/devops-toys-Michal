apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  project: core
  destination:
    namespace: ingress-nginx
    server: https://kubernetes.default.svc
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    chart: ingress-nginx
    targetRevision: 4.8.3
    helm:
      releaseName: ingress-nginx
      values: |-
        nameOverride: "ingress-nginx"
        fullnameOverride: "ingress-nginx"

        controller:
          enableSnippets: true
          allowSnippetAnnotations: true
          metrics:
            enabled: true
            service:
              annotations:
                prometheus.io/scrape: "true"
                prometheus.io/port: "10254"
              labels:
                release: monitoring
            serviceMonitor:
              enabled: true
              additionalLabels:
                release: monitoring
          hostPort:
            enabled: true
          terminationGracePeriodSeconds: 0
          service:
            type: "NodePort"
          watchIngressWithoutClass: true
          nodeSelector:
            ingress-ready: "true"
          tolerations:
          - effect: "NoSchedule"
            key: "node-role.kubernetes.io/master"
            operator: "Equal"
          - effect: "NoSchedule"
            key: "node-role.kubernetes.io/control-plane"
            operator: "Equal"
        config:
          log-format-upstream: '{"msec":"$msec","connection":"$connection","connection_requests":"$connection_requests","pid":"$pid","request_id":"$request_id","request_length":"$request_length","remote_addr":"$remote_addr","remote_user":"$remote_user","remote_port":"$remote_port","time_local":"$time_local","time_iso8601":"$time_iso8601","request":"$request","request_uri":"$request_uri","args":"$args","status":"$status","body_bytes_sent":"$body_bytes_sent","bytes_sent":"$bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for","http_host":"$http_host","server_name":"$server_name","request_time":"$request_time","upstream":"$upstream_addr","upstream_connect_time":"$upstream_connect_time","upstream_header_time":"$upstream_header_time","upstream_response_time":"$upstream_response_time","upstream_response_length":"$upstream_response_length","upstream_cache_status":"$upstream_cache_status","ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","scheme":"$scheme","request_method":"$request_method","server_protocol":"$server_protocol","pipe":"$pipe","gzip_ratio":"$gzip_ratio","http_cf_ray":"$http_cf_ray","geoip_country_code":"$geoip_country_code"}'
        # config:
        #   http-snippet: |
        #     more_set_headers "X-Request-ID: $req_id";
        #   skip-access-log-urls: "/nginx_status/format/json"
        #   log-format-escape-json: "True"
        #   log-format-upstream: '{ "time_iso": "$time_iso8601","msec": "$msec","request_id":
        #     "$req_id","tsw_tracking_id": "$http_x_tracking_id", "ingress": "$ingress_name","namespace":
        #     "$namespace", "web": { "host": "$host", "remote_addr": "$remote_addr","remote_user":
        #     "$remote_user", "duration": $request_time,"request": "$uri", "args": "$args","request_length":
        #     $request_length, "request_method": "$request_method", "status": $status,
        #     "response_size": $bytes_sent,"response_body_size": $body_bytes_sent, "method":
        #     "$request_method","user_agent": "$http_user_agent", "referer": "$http_referer","scheme":
        #     "$scheme","protocol": "$server_protocol", "forwarded_for": "$proxy_add_x_forwarded_for",
        #     "ssl_protocol": "$ssl_protocol", "ssl_cipher": "$ssl_cipher", "upstreams":
        #     {"address": "$upstream_addr","status": "$upstream_status","connect_time":
        #     "$upstream_connect_time", "response_time": "$upstream_response_time","header_time":
        #     "$upstream_header_time" } }}'
        # proxySetHeaders: {}
        # ingressClassResource:
        #   name: nginx
        #   enabled: true
        # defaultBackend:
        #   enabled: true
        #   name: default-backend
        #   extraArgs: {}
        #   serviceAccount:
        #     create: true
        #   port: 8080
        #   podAnnotations:
        #     sidecar.istio.io/inject: "true"
        #   replicaCount: 1
        #   minAvailable: 0
        #   service:
        #     servicePort: 80
        #     type: ClusterIP
        # rbac:
        #   create: true
        # serviceAccount:
        #   create: true
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=false
